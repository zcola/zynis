#!/bin/sh
#################################################################################
#
PAM_FILE_LOCATIONS="/lib/i386-linux-gnu/security /lib/security /lib/x86_64-linux-gnu/security /lib64/security /usr/lib/security"
SUDOERS_LOCATIONS="/etc/sudoers /usr/local/etc/sudoers"
SUDOERS_FILE=""
#
#################################################################################
#
InsertSection "Users, Groups and Authentication"

#################################################################################
# Test        : AUTH-9203
# Description : Check the users except root have a password
Register --test-no AUTH-9203 --weight L --network NO --description "Check the users except root have a password"
if [ ${SKIPTEST} -eq 0 ]; then

	logtext "Test: Checking the users except root have a password"
	if [ $OS = "FreeBSD" ]; then 
		PASSWD_FILE="/etc/master.passwd"
	else
		PASSWD_FILE="/etc/passwd"
	fi

	FIND=$(awk -F ':' '( $2!="*" && $2!="!" ) {print $0}' /etc/shadow|grep -vE '^#|^root'|cut -d ":" -f1)

	if [ ! "${FIND}" = "" ]; then
		Display --indent 2 --text "- Checking the users except root have a password..." --result WARNING --color RED
		logtext "Result: Found more than one have a password accounts"
		ReportWarning "${TEST_NO}" "H" "Multiple users have a password found in passwd file"
		for I in ${FIND}; do
			logtext "Have a password account: ${I}"
		done
	else
		Display --indent 2 --text "- Checking the users except root have a password..." --result OK --color GREEN
		logtext "Result: No accounts found has a password other than root."
	fi

fi
#
#################################################################################
# Test        : AUTH-9204
# Description : Check users with UID zero (0)
Register --test-no AUTH-9204 --weight L --network NO --description "Check users with an UID of zero"
if [ ${SKIPTEST} -eq 0 ]; then

	# Search accounts with UID 0
	logtext "Test: Searching accounts with UID 0"
	FIND=`grep ':0:' /etc/passwd | egrep -v '^#|^root:|^:0:0:::' | cut -d ":" -f1,3 | grep ':0'`

	if [ ! "${FIND}" = "" ]; then
		Display --indent 2 --text "- Search administrator accounts..." --result WARNING --color RED
		logtext "Result: Found more than one administrator accounts"
		ReportWarning "${TEST_NO}" "H" "Multiple users with UID 0 found in passwd file"
		for I in ${FIND}; do
			logtext "Administrator account: ${I}"
		done
		if [ "${OS}" = "FreeBSD" ]; then
			logtext "FreeBSD note: default there is a user 'toor' installed. This account is considered useless unless it"
			logtext "is assigned a password and used for daily operations or emergencies. ie: bad shell for root user."
			ReportSuggestion ${TEST_NO} "Use vipw to delete the 'toor' user if not used."
		fi
	else
		Display --indent 2 --text "- Search administrator accounts..." --result OK --color GREEN
		logtext "Result: No accounts found with UID 0 other than root."
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9208
# Description : Check non-unique accounts
Register --test-no AUTH-9208 --weight L --network NO --description "Check non-unique accounts"
if [ ${SKIPTEST} -eq 0 ]; then
	logtext "Test: ${USER_PASSWD_DOUBLEUID_AUDIT_TITLE}"
	logtext "Description: ${USER_PASSWD_DOUBLEUID_AUDIT_DESCRIPTION}"
	logtext "Action: Checking for non-unique accounts"
	if  [ "${OS}" = "FreeBSD" ]; then
		PASSWD_FILE="/etc/master.passwd"
	else
		PASSWD_FILE="/etc/passwd"
	fi
	# Check password file
	if [ -f ${PASSWD_FILE} ]; then
		FIND=`cat ${PASSWD_FILE} | grep -v '^#' |grep -v toor | cut -d ':' -f3 | uniq -d`
		if [ "${FIND}" = "" ]; then
			Display --indent 2 --text "- Checking for non-unique UIDs... " --result OK --color GREEN
			logtext "Result: all accounts found in ${PASSWD_FILE} are unique"
		else
			Display --indent 2 --text "- Checking for non-unique UIDs... " --result WARNING --color RED
			logtext "Result: found multiple accounts with same UID"
			logtext "Output (non-unique UIDs): ${FIND}"
			ReportWarning ${TEST_NO} "Multiple accounts found with same UID"
		fi
	else
		Display --indent 2 --text "- Checking UIDs... " --result SKIPPED --color WHITE
		logtext "Result: test skipped, ${PASSWD_FILE} file not available"
	fi
	logtext "Remarks: ${USER_PASSWD_DOUBLEUID_AUDIT_TEXT}"
fi
#
#################################################################################
#
# Test        : AUTH-9212
# Description : Test group file with chkgrp tool (ie FreeBSD)
if [ -f /usr/sbin/chkgrp ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
Register --test-no AUTH-9212 --preqs-met ${PREQS_MET} --weight L --network NO --description "Test group file"
if [ ${SKIPTEST} -eq 0 ]; then
	Display --indent 2 --text "- Checking chkgrp tool..." --result FOUND --color GREEN
	logtext "Result: /usr/sbin/chkgrp binary found. Using this to perform next test(s)."
	logtext "Test: Testing consistency of /etc/group file... "
	FIND=`/usr/sbin/chkgrp | grep -v 'is fine'`
	if [ "${FIND}" = "" ]; then
		Display --indent 4 --text "- Checking consistency of /etc/group file..." --result OK --color GREEN
		logtext "Result: chkgrp test performed, Group file seems to be ok."
	else
		Display --indent 4 --text "- Checking consistency of /etc/group file..." --result WARNING --color RED
		logtext "Result: chkgrp found some errors. Run the tool manually to see details."
		logtext "chkgrp output: ${FIND}"
		ReportWarning ${TEST_NO} "M" "chkgrp reported inconsistencies in /etc/group file"
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9216
# Description : Check /etc/group and shadow group files
if [ ! "${GRPCKBINARY}" = "" ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
Register --test-no AUTH-9216 --preqs-met ${PREQS_MET} --weight L --network NO --description "Check group and shadow group files"
if [ ${SKIPTEST} -eq 0 ]; then
	# Test            : run grpck to test group files (most likely /etc/group and shadow group files)
	# Expected result : 0 (exit code)
	logtext "Test: Checking for grpck binary..."

	if [ "${OS}" = "Linux" ]; then
		# Read only mode
		FIND=`${GRPCKBINARY} -r 2> /dev/null ; echo $?`
	elif [ "${OS}" = "AIX" ]; then
		FIND=`${GRPCKBINARY} -n 2> /dev/null ; echo $?`
	else
		FIND=`${GRPCKBINARY} 2> /dev/null ; echo $?`
	fi

	# Overrule for SuSE
	if [ "${LINUX_VERSION}" = "SuSE" ]; then
		FIND=`${GRPCKBINARY} -q -r > /dev/null ; echo $?`	
	fi

	# Check exit-code
	if [ "${FIND}" = "0" ]; then
		Display --indent 2 --text "- Checking consistency of group files (grpck)..." --result OK --color GREEN
		logtext "Result: grpck binary didn't find any errors in the group files"
	else
		Display --indent 2 --text "- Checking consistency of group files (grpck)..." --result WARNING --color RED
		ReportWarning ${TEST_NO} "M" "grpck binary found errors in one or more group files"
		ReportSuggestion ${TEST_NO} "Run grpck manually and check your group files"
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9222
# Description : Check for non unique groups
Register --test-no AUTH-9222 --weight L --network NO --description "Check for non unique groups"
if [ ${SKIPTEST} -eq 0 ]; then
	logtext "Test: Checking for non unique group ID's in /etc/group"
	FIND=`cat /etc/group | grep -v '^#' | grep -v '^$' | awk -F: '{ print $3 }' | sort | uniq -d`
	if [ "${FIND}" = "" ]; then
		Display --indent 2 --text "- Checking non unique group ID's..." --result OK --color GREEN
		logtext "Result: All group ID's are unique"
	else
		Display --indent 2 --text "- Checking non unique group ID's..." --result WARNING --color RED
		logtext "Result: Found the same group ID multiple times"
		logtext "Output: ${FIND}"
		ReportWarning ${TEST_NO} "H" "Found multiple groups with same group ID"
		ReportSuggestion ${TEST_NO} "Check your /etc/group file and correct inconsistencies"
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9226
# Description : Check non unique group names
if [ -f /etc/group ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
Register --test-no AUTH-9226 --preqs-met ${PREQS_MET} --weight L --network NO --description "Check non unique group names"
if [ ${SKIPTEST} -eq 0 ]; then
	logtext "Test: Checking for non unique group names in /etc/group"
	FIND=`cat /etc/group | grep -v '^#' | grep -v '^$' | awk -F: '{ print $1 }' | sort | uniq -d`
	if [ "${FIND}" = "" ]; then
		Display --indent 2 --text "- Checking non unique group names..." --result OK --color GREEN
		logtext "Result: All group names are unique"
	else
		Display --indent 2 --text "- Checking non unique group names..." --result WARNING --color WARNING
		logtext "Result: Found the same group name multiple times"
		logtext "Output: ${FIND}"
		ReportWarning ${TEST_NO} "M" "Found inconsistencies in group file (multiple occurences of a single group)"
		ReportSuggestion ${TEST_NO} "Check your /etc/group file and correct inconsistencies"
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9228
# Description : Check Linux password file consistency
if [ -x /usr/sbin/pwck ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
Register --test-no AUTH-9228 --os Linux --preqs-met ${PREQS_MET} --weight L --network NO --description "Check password file consistency"
if [ ${SKIPTEST} -eq 0 ]; then
	logtext "Test: Checking password file consistency (pwck)"
	FIND=`/usr/sbin/pwck -q -r 2> /dev/null; echo $?`
	if [ "${FIND}" = "0" ]; then
		Display --indent 2 --text "- Checking password file consistency..." --result OK --color GREEN
		logtext "Result: pwck check didn't find any problems"
	else
		Display --indent 2 --text "- Checking password file consistency..." --result WARNING --color RED
		logtext "Result: pwck found one or more errors/warnings in the password file."
		ReportWarning ${TEST_NO} "M" "pwck found one or more errors/warnings in the password file"
		ReportSuggestion ${TEST_NO} "Run pwck manually and correct found issues."
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9230
# Description : Check Solaris password file consistency
if [ -x /usr/sbin/pwck ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
Register --test-no AUTH-9230 --os Solaris --preqs-met ${PREQS_MET} --weight L --network NO --description "Check password file consistency"
if [ ${SKIPTEST} -eq 0 ]; then
	logtext "Test: Checking password file consistency (pwck)"
	FIND=`/usr/sbin/pwck 2> /dev/null; echo $?`
	if [ "${FIND}" = "0" ]; then
		Display --indent 2 --text "- Checking password file consistency..." --result OK --color GREEN
		logtext "Result: pwck finished didn't find problems"
	else
		Display --indent 2 --text "- Checking password file consistency..." --result WARNING --color RED
		logtext "Result: pwck found one or more errors/warnings in the password file."
		ReportWarning ${TEST_NO} "M" "pwck found one or more errors/warnings in the password file"
		ReportSuggestion ${TEST_NO} "Run pwck manually and correct found issues."
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9234
# Description : Query user accounts (YYY)
# Notes       : HPUX > 100
#               MacOS: need to be improved (just reading passwd file is not enough)
#               OpenBSD/NetBSD: unknown
Register --test-no AUTH-9234 --os Linux --weight L --network NO --description "Query user accounts"
if [ ${SKIPTEST} -eq 0 ]; then
	logtext "Test: Read real system users (including root user) from /etc/passwd..."
	FIND=""

	if [ "${OS}" = "FreeBSD" ]; then
		logtext "FreeBSD real users output (ID > 1000, but not 65534):"
		FIND=`awk -F: '($3 > 1000) && ($3 != 65534) || ($3 == 0) { print $1","$3 }' /etc/passwd`
	fi

	if [ "${OS}" = "Linux" ]; then
		logtext "Linux real users output (ID > 500, but not 65534):"
		FIND=`awk -F: '($3 > 500) && ($3 != 65534) || ($3 == 0) { print $1","$3 }' /etc/passwd`
	fi

	if [ "${OS}" = "Solaris" ]; then
		logtext "Solaris real users output (ID > 100, but not 60001/65534):"
		FIND=`awk -F: '($3 > 100 && $3 != 60001 && $3 != 65534) || ($3 == 0) { print $1","$3 }' /etc/passwd`
	fi

	Display --indent 2 --text "- Query system users (non daemons)..." --result DONE --color GREEN
	# Check if we got any output
	if [ "${FIND}" = "" ]; then
		Display --indent 4 --text "Result: No users found/unknown result"
		logtext "Result: Querying of system users skipped"
	else
		for I in ${FIND}; do
			logtext "Real user: ${I}"
			report "real_user[]=${I}"
		done
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9240
# Description : Query NIS+ authentication support
Register --test-no AUTH-9240 --weight L --network NO --description "Query NIS+ authentication support"
if [ ${SKIPTEST} -eq 0 ]; then
	if [ -f /etc/nsswitch.conf ]; then
		FIND=`egrep "^passwd" /etc/nsswitch.conf | egrep "compat|nisplus"`
		if [ "${FIND}" = "" ]; then
			logtext "Result: NIS+ authentication not enabled"
			Display --indent 2 --text "- Checking NIS+ authentication support" --result "NOT ENABLED" --color WHITE
		else
			FIND2=`egrep "^passwd_compat" /etc/nsswitch.conf | grep "nisplus"`
			FIND3=`egrep "^passwd" /etc/nsswitch.conf | grep "nisplus"`
			if [ ! "${FIND2}" = "" -o ! "${FIND3}" = "" ]; then
				logtext "Result: NIS+ authentication enabled"
				Display --indent 2 --text "- Checking NIS+ authentication support" --result "ENABLED" --color GREEN
			else
				logtext "Result: NIS+ authentication not enabled"
				Display --indent 2 --text "- Checking NIS+ authentication support" --result "NOT ENABLED" --color WHITE
			fi
		fi      
	else
		logtext "Result: /etc/nsswitch.conf not found"
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9242
# Description : Query NIS authentication support
Register --test-no AUTH-9242 --weight L --network NO --description "Query NIS authentication support"
if [ ${SKIPTEST} -eq 0 ]; then
	if [ -f /etc/nsswitch.conf ]; then
		FIND=`egrep "^passwd" /etc/nsswitch.conf | egrep "compat|nis" | grep -v "nisplus"`
		if [ "${FIND}" = "" ]; then
			logtext "Result: NIS authentication not enabled"
			Display --indent 2 --text "- Checking NIS authentication support" --result "NOT ENABLED" --color WHITE
		else
			FIND2=`egrep "^passwd_compat" /etc/nsswitch.conf | grep "nis" | grep -v "nisplus"`
			FIND3=`egrep "^passwd" /etc/nsswitch.conf | grep "nis" | grep -v "nisplus"`
			if [ ! "${FIND2}" = "" -o ! "${FIND3}" = "" ]; then
				logtext "Result: NIS authentication enabled"
				Display --indent 2 --text "- Checking NIS authentication support" --result "ENABLED" --color GREEN
			else
				logtext "Result: NIS authentication not enabled"
				Display --indent 2 --text "- Checking NIS authentication support" --result "NOT ENABLED" --color WHITE
			fi
		fi      
	else
		logtext "Result: /etc/nsswitch.conf not found"
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9250
# Description : Check for sudoers file
Register --test-no AUTH-9250 --weight L --network NO --description "Checking sudoers file"
if [ ${SKIPTEST} -eq 0 ]; then
	FOUND=0
	for I in ${SUDOERS_LOCATIONS}; do
		logtext "Test: checking presence ${I}"
		if [ -f ${I} ]; then
			FOUND=1
			SUDOERS_FILE="${I}"
			logtext "Result: found file (${SUDOERS_FILE})"
		else
			logtext "Result: file ${I} not found"
		fi
	done
	if [ ${FOUND} -eq 1 ]; then
		logtext "Result: sudoers file found (${SUDOERS_FILE})"
		Display --indent 2 --text "- Checking sudoers file" --result FOUND --color GREEN
		# YYY add more tests to audit sudoers file
	else
		logtext "Result: sudoers file NOT found"
		Display --indent 2 --text "- Checking sudoers file" --result "NOT FOUND" --color YELLOW
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9252
# Description : Check for sudoers file permissions
if [ ! "${SUDOERS_FILE}" = "" ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
Register --test-no AUTH-9252 --preqs-met ${PREQS_MET} --weight L --network NO --description "Check sudoers file"
if [ ${SKIPTEST} -eq 0 ]; then
	logtext "Test: checking sudoers file (${SUDOERS_FILE}) permissions"
	FIND=`ls -l ${SUDOERS_FILE} | cut -c 2-10`
	logtext "Result: Found file permissions: ${FIND}"
	if [ "${FIND}" = "rw-------" -o "${FIND}" = "rw-rw----" -o "${FIND}" = "r--r-----" ]; then
		logtext "Result: file ${SUDOERS_FILE} has correct permissions"
		Display --indent 4 --text "- Check sudoers file permissions" --result OK --color GREEN
	else
		logtext "Result: file has possibly unsafe file permissions"
		Display --indent 4 --text "- Check sudoers file permissions" --result WARNING --color RED
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9264
# Description : Scan /etc/pam.conf file
Register --test-no AUTH-9264 --weight L --network NO --description "Checking presence pam.conf"
if [ ${SKIPTEST} -eq 0 ]; then
	logtext "Test: Checking file /etc/pam.conf"
	if [ -f /etc/pam.conf ]; then
		logtext "Result: file /etc/pam.conf exists"
		Display --indent 2 --text "- Checking PAM configuration files (pam.conf)" --result FOUND --color GREEN
		logtext "Test: searching PAM configuration files"
		FIND=`cat /etc/pam.conf | grep -v "^#" | grep -v "^$" | sed 's/ /!space!/g'`
		if [ "${FIND}" = "" ]; then
			logtext "Result: File has no configuration options defined (empty, or only filled with comments and empty lines)"
		else
			logtext "Result: found one or more configuration lines"
			for I in ${FIND}; do
				I=`echo ${I} | sed 's/!space!/ /g'`
				logtext "Found line: ${I}"
			done
		fi
	else
		logtext "Result: file /etc/pam.conf could not be found"
		Display --indent 2 --text "- Checking PAM configuration file (pam.conf)" --result "NOT FOUND" --color WHITE
	fi	
fi
#
#################################################################################
#
# Test        : AUTH-9266
# Description : Searching available PAM configurations (/etc/pam.d)
Register --test-no AUTH-9266 --weight L --network NO --description "Checking presence pam.d files"
if [ ${SKIPTEST} -eq 0 ]; then
	logtext "Test: Checking directory /etc/pam.d"
	if [ -d /etc/pam.d ]; then
		logtext "Result: directory /etc/pam.d exists"
		Display --indent 2 --text "- Checking PAM configuration files (pam.d)" --result FOUND --color GREEN
		logtext "Test: searching PAM configuration files"
		FIND=`find /etc/pam.d -type f -print | sort`
		for I in ${FIND}; do
			logtext "Found file: ${I}"
		done
	else
		logtext "Result: directory /etc/pam.d could not be found"
		Display --indent 2 --text "- Checking PAM configuration files (pam.d)" --result "NOT FOUND" --color WHITE
	fi	
fi
#
#################################################################################
#
# Test        : AUTH-9268
# Description : Searching available PAM files
# Notes       : PAM is used on AIX, Linux, HPUX, Solaris
if [ ${OS} = "AIX" -o ${OS} = "Linux" -o ${OS} = "HPUX" -o ${OS} = "Solaris" ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
Register --test-no AUTH-9268 --preqs-met ${PREQS_MET} --weight L --network NO --description "Checking presence pam.d files"
if [ ${SKIPTEST} -eq 0 ]; then
	FOUND=0
	logtext "Test: Searching pam modules"
	for I in ${PAM_FILE_LOCATIONS}; do
		logtext "Test: Checking ${I}"
		if [ -d ${I} -a ! -L ${I} ]; then
			logtext "Result: directory ${I} exists"
			FIND=`find ${I} -type f -name "*.so" -print | sort`
			if [ ! "${FIND}" = "" ]; then FOUND=1; fi
			for I in ${FIND}; do
				logtext "Found file: ${I}"
			done
		else
			logtext "Result: directory ${I} could not be found or is a symlink to another directory"
		fi
	done
	# Check if we found at least one module
	if [ ${FOUND} -eq 0 ]; then
		Display --indent 2 --text "- Checking PAM modules" --result "NOT FOUND" --color WHITE
		logtext "Result: no PAM modules found"
	else
		Display --indent 2 --text "- Checking PAM modules" --result FOUND --color GREEN
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9282 and AUTH-9283
# Note        : Every Linux based operating system seem to have different passwd
#               options, so we have to check the version first.
if [ "${OS}" = "Linux" ]; then
	if [ ${OS_REDHAT_OR_CLONE} -eq 0 ]; then
		case ${LINUX_VERSION} in
			"SuSE")
				PREQS_MET="YES"
				FIND=`passwd -a -S | awk '{ if ($2=="P" && $5=="99999") print $1 }'`
				FIND2=`passwd -a -S | awk '{ if ($2=="NP") print $1 }'`
				;;
			*)
				PREQS_MET="YES"
				FIND=`passwd --all --status | awk '{ if ($2=="P" && $5=="99999") print $1 }'`
				FIND2=`passwd --all --status | awk '{ if ($2=="NP") print $1 }'`
				;;
		esac
	else
		logtext "Result: skipping test for this Linux version"
		ReportManual "AUTH-9282:01"
		PREQS_MET="NO"
		FIND=""
		FIND2=""
	fi
else
	PREQS_MET="NO"
fi

# Test        : AUTH-9282
# Description : Search password protected accounts without expire (Linux)
Register --test-no AUTH-9282 --preqs-met ${PREQS_MET} --weight L --network NO --description "Checking password protected account without expire date"
if [ ${SKIPTEST} -eq 0 ]; then
	logtext "Test: Checking Linux version and password expire date status"
	if [ "${FIND}" = "" ]; then
		logtext "Result: all accounts seem to have an expire date"
		Display --indent 2 --text "- Checking accounts without expire date" --result OK --color GREEN
	else
		logtext "Result: found one or more accounts with expire date set"
		for I in ${FIND}; do
			logtext "Account without expire date: ${I}"
		done
		Display --indent 2 --text "- Checking accounts without expire date" --result SUGGESTION --color YELLOW
		ReportSuggestion ${TEST_NO} "When possible set expire dates for all password protected accounts"
	fi
fi
# Test        : AUTH-9283
# Description : Search passwordless accounts
Register --test-no AUTH-9283 --preqs-met ${PREQS_MET} --weight L --network NO --description "Checking accounts without password"
if [ ${SKIPTEST} -eq 0 ]; then
	logtext "Test: Checking passwordless accounts"
	if [ "${FIND2}" = "" ]; then
		logtext "Result: all accounts seem to have a password"
		Display --indent 2 --text "- Checking accounts without password" --result OK --color GREEN
	else
		logtext "Result: found one or more accounts without password"
		for I in ${FIND2}; do
			logtext "Account without password: ${I}"
			report "account_without_password=${I}"
		done
		Display --indent 2 --text "- Checking accounts without password" --result WARNING --color RED
		ReportWarning ${TEST_NO} "Found accounts without password"
	fi
fi
#
#################################################################################
#
# Test        : AUTH-9308
# Description : Check single user mode login for Linux
Register --test-no AUTH-9308 --os Linux --weight L --network NO --description "Check single user login configuration"
if [ ${SKIPTEST} -eq 0 ]; then
	FOUND=0
	# Check if file exists
	logtext "Test: Searching /etc/inittab"
	if [ -f /etc/inittab ]; then
		logtext "Result: file /etc/inittab exists"
		logtext "Test: checking presence sulogin for single user mode"
		FIND=`grep "^~~:S:wait:/sbin/sulogin" /etc/inittab`
		FIND2=`grep "^su:S:wait:/sbin/sulogin" /etc/inittab`
		if [ ! "${FIND}" = "" -o ! "${FIND2}" = "" ]; then
			FOUND=1
			logtext "Result: found sulogin, so single user is protected"
		fi
	else
		logtext "Result: file /etc/inittab does not exist"
	fi

	# Check if file exists
	logtext "Test: Searching /etc/sysconfig/init"
	if [ -f /etc/sysconfig/init ]; then
		logtext "Result: file /etc/sysconfig/init exists"
		logtext "Test: checking presence sulogin for single user mode"
		FIND=`grep "^SINGLE=/sbin/sulogin" /etc/sysconfig/init`
		if [ ! "${FIND}" = "" ]; then
			FOUND=1
			logtext "Result: found sulogin, so single user is protected"
		fi
	else
		logtext "Result: file /etc/inittab does not exist"
	fi
	if [ -f /etc/inittab -o -f /etc/sysconfig/init ]; then
		if [ ${FOUND} -eq 0 ]; then
			logtext "Result: option not set, no password needed at single user mode boot"
			Display --indent 2 --text "- Checking Linux single user mode authentication" --result WARNING --color RED
			ReportWarning ${TEST_NO} "L" "No password set for single mode"
			ReportSuggestion ${TEST_NO} "Set password for single user mode to minimize physical access attack surface"
			AddHP 0 2
		else
			logtext "Result: option set, password is needed at single user mode boot"
			Display --indent 2 --text "- Checking Linux single user mode authentication" --result OK --color GREEN
			AddHP 2 2
		fi
	else
		# YYY
		logtext "Result: No inittab or init file found, unsure if system is protected"
	fi
fi
#
wait_for_keypress

#
#================================================================================
